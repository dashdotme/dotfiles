export SHELL=$(which zsh)

# Detect OS type
case "$(uname -s)" in
  Darwin*)
    OS_TYPE="macos"
    ;;
  Linux*)
    OS_TYPE="linux"
    ;;
  *)
    OS_TYPE="unknown"
    ;;
esac

export FZF_BASE=~/.fzf

# OS-specific configurations
if [ "$OS_TYPE" = "macos" ]; then
  # macOS-specific settings
  if [ -f /opt/homebrew/etc/profile.d/z.sh ]; then
    source /opt/homebrew/etc/profile.d/z.sh
  fi
  (cat ~/.cache/wal/sequences &)
  eval "$(zoxide init zsh)"
  export EDITOR="nvim"
  export VISUAL="nvim"
  alias rebuild="sudo darwin-rebuild switch --flake /etc/nix-darwin#macbook"
else
  # Linux-specific settings
  export NIX_TARGET="${NIX_TARGET:-$([ -e /sys/class/power_supply/BAT0 ] && echo "xps" || echo "home")}"
  alias rebuild="sudo nixos-rebuild switch --flake /etc/nixos#$NIX_TARGET"
  if [ -f /usr/share/z/z.sh ]; then
    source /usr/share/z/z.sh
  elif [ -f $HOME/z/z.sh ]; then
    source $HOME/z/z.sh
  fi
  # pywal theming - overrides colours
  # (cat ~/.cache/wal/sequences &)
  eval "$(zoxide init zsh)"
fi

export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="frisk2"

# Base plugins that work universally
plugins=(git fzf zsh-interactive-cd docker colored-man-pages)

# Check for plugin existence before adding to the list
for plugin in zsh-autosuggestions zsh-syntax-highlighting zsh-completions; do
  if [ -d "${ZSH_CUSTOM:-$ZSH/custom}/plugins/$plugin" ] || [ -d "$ZSH/plugins/$plugin" ]; then
    plugins+=($plugin)
  else
    echo "[oh-my-zsh] plugin '$plugin' not found. Install with:"
    echo "git clone https://github.com/zsh-users/$plugin ${ZSH_CUSTOM:-$ZSH/custom}/plugins/$plugin"
  fi
done

source $ZSH/oh-my-zsh.sh

# User configuration

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Aliases
alias python="python3"

# Terraform completion
if command -v terraform &>/dev/null; then
  autoload -U +X bashcompinit && bashcompinit
  complete -o nospace -C $(which terraform) terraform
fi

# uv completion - if installed
if command -v uv &>/dev/null; then
  eval "$(uv generate-shell-completion zsh 2>/dev/null || true)"
fi

# Environment file - check if exists before sourcing
if [ -f "$HOME/.local/bin/env" ]; then
  . "$HOME/.local/bin/env"
fi

# fnm (Fast Node Manager) - OS specific paths
if [ "$OS_TYPE" = "macos" ]; then
  FNM_PATH="/Users/dashvallance/Library/Application Support/fnm"
else
  FNM_PATH="$HOME/.local/share/fnm"
fi

# Load fnm if it exists at the detected path
if [ -d "$FNM_PATH" ]; then
  export PATH="$FNM_PATH:$PATH"
  # fnm autocomplete
  command -v fnm &>/dev/null && eval "$(fnm env --use-on-cd --shell zsh 2>/dev/null || true)"
fi

# GitHub username
export GITHUB_USERNAME=dashdotme

# direnv
eval "$(direnv hook zsh)"

fcd() {
  local dir
  dir=$(find ${1:-.} -type d 2>/dev/null | fzf +m) && cd "$dir"
}

alias ls='eza'
alias ll='eza -l'
alias lt='eza --tree'
alias la='eza -la'

wat() {
  if [ -z "$1" ]; then
    echo "Usage: wat <command>" >&2
    return 1
  fi

  if command -v "$1" >/dev/null 2>&1; then
    echo "\033[32m'$1' is already installed at: $(which "$1")\033[0m" >&2
    return 0
  fi

  local p=$(nix-locate --minimal --no-group --type x --type s --top-level --whole-name --at-root "/bin/$1" 2>/dev/null)
  if [ -n "$p" ]; then
    echo "\033[34mThe program '$1' is available in:\033[0m" >&2
    printf "  \033[36m%s\033[0m\n" $p >&2
  else
    echo "\033[31mNo package found for: $1\033[0m" >&2
  fi
}
